import { TestBed } from '@angular/core/testing';

import { BillingService } from './billing.service';
import { HttpClientTestingModule } from '@angular/common/http/testing';

describe('BillingService', () => {
  let service: BillingService;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [BillingService]
    });
    service = TestBed.inject(BillingService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
  it('GetAllBillingData', () => {
    const obj = [{    billingId: 0,
    resourceStartDate: "2023-11-09T05:28:54.208Z",
    resourceEndDate: "2023-11-09T05:28:54.208Z",
    domain: "string",
    currency: "string",
    billRate: 0,
    hours: 0,
    totalBilledhrs: 0,
    sowId: 0,
    candidateId: 0,
    type: "string",
    employeeId: 0,
    customerTypeId: 0,
    projectTypeId: 0,   
  billable: true,
  clientProjectRole: "string",
  clientProjectRoleDesc: "string",
  aliasName: "string",
  allocationPercentage: 0,
  comments: "string",
  projectManagerTypeId: 0,
  contractCategoryId: 0,
  jobCodeId: 0,
  frequencyId: 0,
  bussinessUnitId: 0,
  departmentTypeId: 0,
  candidateName: "string",
  candidateUid: "string",
  contractCategory: "string",
  customerId: "string",
  customerName: "string",
  departmentId: 0,
  departmentDescription: "string",
  employeeType: "string",
  frequency: "string",
  jobCode: "string",
  jobDescription: "string",
  projectManagerId: "string",
  projectManagerName: "string",
  projectStartDate: "2023-11-09T05:28:54.208Z",
  projectEndDate: "2023-11-09T05:28:54.208Z",
  projectId: "string",
  projectDescription: "string",
  joiningDate: "2023-11-09T05:28:54.208Z",
  bussinessUnit: "string",
  bussinessUnitDescription: "string",
  locationTypeId: 0,
  locationId: "string",
  locationDescription: "string",
  regionId: 0,
  region: "string",
  usttpmId: 0,
  usttpmName: "string",
  usttpmuid: "string",
  terminationDate: "2023-11-09T05:28:54.208Z",
  obu: 0,
  obuDescription: "string"
    }];

    service.GetAllBillingData().subscribe((data) => {
      expect(data).toEqual(obj);
    });
  });
    it('PostBillingData', () => {
      const obj = {   billingId: 0,
        resourceStartDate: "2023-11-09T05:28:54.208Z",
        resourceEndDate: "2023-11-09T05:28:54.208Z",
        domain: "string",
        currency: "string",
        billRate: 0,
        hours: 0,
        totalBilledhrs: 0,
        sowId: 0,
        candidateId: 0,
        type: "string",
        employeeId: 0,
        customerTypeId: 0,
        projectTypeId: 0,   
      billable: true,
      clientProjectRole: "string",
      clientProjectRoleDesc: "string",
      aliasName: "string",
      allocationPercentage: 0,
      comments: "string",
      projectManagerTypeId: 0,
      contractCategoryId: 0,
      jobCodeId: 0,
      frequencyId: 0,
      bussinessUnitId: 0,
      departmentTypeId: 0,
      candidateName: "string",
      candidateUid: "string",
      contractCategory: "string",
      customerId: "string",
      customerName: "string",
      departmentId: 0,
      departmentDescription: "string",
      employeeType: "string",
      frequency: "string",
      jobCode: "string",
      jobDescription: "string",
      projectManagerId: "string",
      projectManagerName: "string",
      projectStartDate: "2023-11-09T05:28:54.208Z",
      projectEndDate: "2023-11-09T05:28:54.208Z",
      projectId: "string",
      projectDescription: "string",
      joiningDate: "2023-11-09T05:28:54.208Z",
      bussinessUnit: "string",
      bussinessUnitDescription: "string",
      locationTypeId: 0,
      locationId: "string",
      locationDescription: "string",
      regionId: 0,
      region: "string",
      usttpmId: 0,
      usttpmName: "string",
      usttpmuid: "string",
      terminationDate: "2023-11-09T05:28:54.208Z",
      obu: 0,
      obuDescription: "string"};
  
      service.PostBillingData(obj).subscribe((response) => {
        expect(response).toEqual(obj);
      });
    
  });
  it('DeleteBillingData',()=>{
    const obj={ billingId: 0,
      resourceStartDate: "2023-11-09T05:28:54.208Z",
      resourceEndDate: "2023-11-09T05:28:54.208Z",
      domain: "string",
      currency: "string",
      billRate: 0,
      hours: 0,
      totalBilledhrs: 0,
      sowId: 0,
      candidateId: 0,
      type: "string",
      employeeId: 0,
      customerTypeId: 0,
      projectTypeId: 0,   
    billable: true,
    clientProjectRole: "string",
    clientProjectRoleDesc: "string",
    aliasName: "string",
    allocationPercentage: 0,
    comments: "string",
    projectManagerTypeId: 0,
    contractCategoryId: 0,
    jobCodeId: 0,
    frequencyId: 0,
    bussinessUnitId: 0,
    departmentTypeId: 0,
    candidateName: "string",
    candidateUid: "string",
    contractCategory: "string",
    customerId: "string",
    customerName: "string",
    departmentId: 0,
    departmentDescription: "string",
    employeeType: "string",
    frequency: "string",
    jobCode: "string",
    jobDescription: "string",
    projectManagerId: "string",
    projectManagerName: "string",
    projectStartDate: "2023-11-09T05:28:54.208Z",
    projectEndDate: "2023-11-09T05:28:54.208Z",
    projectId: "string",
    projectDescription: "string",
    joiningDate: "2023-11-09T05:28:54.208Z",
    bussinessUnit: "string",
    bussinessUnitDescription: "string",
    locationTypeId: 0,
    locationId: "string",
    locationDescription: "string",
    regionId: 0,
    region: "string",
    usttpmId: 0,
    usttpmName: "string",
    usttpmuid: "string",
    terminationDate: "2023-11-09T05:28:54.208Z",
    obu: 0,
    obuDescription: "string"}
      service.DeleteBillingData(obj.billingId).subscribe((x)=>[
        expect(x).toEqual(obj)
      ])
     
  })
  it('UpdateBillingData',()=>{
    const obj={billingId: 0,
      resourceStartDate: "2023-11-09T05:28:54.208Z",
      resourceEndDate: "2023-11-09T05:28:54.208Z",
      domain: "string",
      currency: "string",
      billRate: 0,
      hours: 0,
      totalBilledhrs: 0,
      sowId: 0,
      candidateId: 0,
      type: "string",
      employeeId: 0,
      customerTypeId: 0,
      projectTypeId: 0,   
    billable: true,
    clientProjectRole: "string",
    clientProjectRoleDesc: "string",
    aliasName: "string",
    allocationPercentage: 0,
    comments: "string",
    projectManagerTypeId: 0,
    contractCategoryId: 0,
    jobCodeId: 0,
    frequencyId: 0,
    bussinessUnitId: 0,
    departmentTypeId: 0,
    candidateName: "string",
    candidateUid: "string",
    contractCategory: "string",
    customerId: "string",
    customerName: "string",
    departmentId: 0,
    departmentDescription: "string",
    employeeType: "string",
    frequency: "string",
    jobCode: "string",
    jobDescription: "string",
    projectManagerId: "string",
    projectManagerName: "string",
    projectStartDate: "2023-11-09T05:28:54.208Z",
    projectEndDate: "2023-11-09T05:28:54.208Z",
    projectId: "string",
    projectDescription: "string",
    joiningDate: "2023-11-09T05:28:54.208Z",
    bussinessUnit: "string",
    bussinessUnitDescription: "string",
    locationTypeId: 0,
    locationId: "string",
    locationDescription: "string",
    regionId: 0,
    region: "string",
    usttpmId: 0,
    usttpmName: "string",
    usttpmuid: "string",
    terminationDate: "2023-11-09T05:28:54.208Z",
    obu: 0,
    obuDescription: "string"}
      service.UpdateBillingData(obj.billingId,obj).subscribe((x)=>[
        expect(x).toEqual(obj)
      ])
     
  })
  it('GetBillingById',()=>{
    const obj={billingId: 0,
      resourceStartDate: "2023-11-09T05:28:54.208Z",
      resourceEndDate: "2023-11-09T05:28:54.208Z",
      domain: "string",
      currency: "string",
      billRate: 0,
      hours: 0,
      totalBilledhrs: 0,
      sowId: 0,
      candidateId: 0,
      type: "string",
      employeeId: 0,
      customerTypeId: 0,
      projectTypeId: 0,   
    billable: true,
    clientProjectRole: "string",
    clientProjectRoleDesc: "string",
    aliasName: "string",
    allocationPercentage: 0,
    comments: "string",
    projectManagerTypeId: 0,
    contractCategoryId: 0,
    jobCodeId: 0,
    frequencyId: 0,
    bussinessUnitId: 0,
    departmentTypeId: 0,
    candidateName: "string",
    candidateUid: "string",
    contractCategory: "string",
    customerId: "string",
    customerName: "string",
    departmentId: 0,
    departmentDescription: "string",
    employeeType: "string",
    frequency: "string",
    jobCode: "string",
    jobDescription: "string",
    projectManagerId: "string",
    projectManagerName: "string",
    projectStartDate: "2023-11-09T05:28:54.208Z",
    projectEndDate: "2023-11-09T05:28:54.208Z",
    projectId: "string",
    projectDescription: "string",
    joiningDate: "2023-11-09T05:28:54.208Z",
    bussinessUnit: "string",
    bussinessUnitDescription: "string",
    locationTypeId: 0,
    locationId: "string",
    locationDescription: "string",
    regionId: 0,
    region: "string",
    usttpmId: 0,
    usttpmName: "string",
    usttpmuid: "string",
    terminationDate: "2023-11-09T05:28:54.208Z",
    obu: 0,
    obuDescription: "string"}
      service.GetBillingById(obj.billingId).subscribe((x)=>[
        expect(x).toEqual(obj)
      ])
      
      
  })
});
